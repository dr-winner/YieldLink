"use client";

import { HttpAgent, Actor } from "@dfinity/agent";

// Using declarations generated by `dfx generate`
// The path assumes monorepo layout: src/declarations/<canister>
// If this import fails in your bundler, we can copy declarations into the frontend package.
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { idlFactory, canisterId } from "../../declarations/yield-link-backend";

export type YieldLinkBackend = ReturnType<typeof Actor.createActor<typeof idlFactory>>;

export async function getBackendActor(options?: { host?: string }): Promise<YieldLinkBackend> {
  const host = options?.host ?? (process.env.NEXT_PUBLIC_DFX_HOST ?? "http://127.0.0.1:4943");

  const agent = new HttpAgent({ host });

  // Fetch the root key in local dev to validate certificates
  if (host.includes("127.0.0.1") || host.includes("localhost")) {
    try {
      // @ts-ignore
      await agent.fetchRootKey();
    } catch {
      // ignore in production
    }
  }

  const actor = Actor.createActor(idlFactory, {
    agent,
    canisterId,
  });

  return actor as unknown as YieldLinkBackend;
}


